{"ast":null,"code":"const API_BASE_URL = 'http://localhost:3001/api';\nexport const transactionAPI = {\n  // Create a new transaction\n  create: async transactionData => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/transactions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(transactionData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error creating transaction:', error);\n      throw error;\n    }\n  },\n  // Get all transactions\n  getAll: async (filters = {}) => {\n    try {\n      const queryParams = new URLSearchParams();\n      if (filters.limit) queryParams.append('limit', filters.limit);\n      if (filters.category) queryParams.append('category', filters.category);\n      if (filters.type) queryParams.append('type', filters.type);\n      const url = `${API_BASE_URL}/transactions${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      throw error;\n    }\n  },\n  // Get a single transaction by ID\n  getById: async id => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/transactions/${id}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching transaction:', error);\n      throw error;\n    }\n  },\n  // Update a transaction\n  update: async (id, updateData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/transactions/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updateData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n      throw error;\n    }\n  },\n  // Delete a transaction\n  delete: async id => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/transactions/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error deleting transaction:', error);\n      throw error;\n    }\n  },\n  // Test API connection\n  testConnection: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error testing API connection:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","transactionAPI","create","transactionData","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","console","getAll","filters","queryParams","URLSearchParams","limit","append","category","type","url","toString","getById","id","update","updateData","delete","testConnection"],"sources":["/Users/ckitt/Desktop/Projects/Tally/frontend/src/api/transactions.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:3001/api';\n\nexport const transactionAPI = {\n  // Create a new transaction\n  create: async (transactionData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/transactions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(transactionData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error creating transaction:', error);\n      throw error;\n    }\n  },\n\n  // Get all transactions\n  getAll: async (filters = {}) => {\n    try {\n      const queryParams = new URLSearchParams();\n\n      if (filters.limit) queryParams.append('limit', filters.limit);\n      if (filters.category) queryParams.append('category', filters.category);\n      if (filters.type) queryParams.append('type', filters.type);\n\n      const url = `${API_BASE_URL}/transactions${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      throw error;\n    }\n  },\n\n  // Get a single transaction by ID\n  getById: async (id) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/transactions/${id}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching transaction:', error);\n      throw error;\n    }\n  },\n\n  // Update a transaction\n  update: async (id, updateData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/transactions/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n      throw error;\n    }\n  },\n\n  // Delete a transaction\n  delete: async (id) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/transactions/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error deleting transaction:', error);\n      throw error;\n    }\n  },\n\n  // Test API connection\n  testConnection: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error testing API connection:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,cAAc,GAAG;EAC5B;EACAC,MAAM,EAAE,MAAOC,eAAe,IAAK;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,eAAe,EAAE;QAC3DM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,eAAe;MACtC,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,MAAM,EAAE,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC9B,IAAI;MACF,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;MAEzC,IAAIF,OAAO,CAACG,KAAK,EAAEF,WAAW,CAACG,MAAM,CAAC,OAAO,EAAEJ,OAAO,CAACG,KAAK,CAAC;MAC7D,IAAIH,OAAO,CAACK,QAAQ,EAAEJ,WAAW,CAACG,MAAM,CAAC,UAAU,EAAEJ,OAAO,CAACK,QAAQ,CAAC;MACtE,IAAIL,OAAO,CAACM,IAAI,EAAEL,WAAW,CAACG,MAAM,CAAC,MAAM,EAAEJ,OAAO,CAACM,IAAI,CAAC;MAE1D,MAAMC,GAAG,GAAG,GAAG1B,YAAY,gBAAgBoB,WAAW,CAACO,QAAQ,CAAC,CAAC,GAAG,IAAIP,WAAW,CAACO,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;MAEvG,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAACqB,GAAG,CAAC;MAEjC,IAAI,CAACtB,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAY,OAAO,EAAE,MAAOC,EAAE,IAAK;IACrB,IAAI;MACF,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,iBAAiB6B,EAAE,EAAE,CAAC;MAElE,IAAI,CAACzB,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAc,MAAM,EAAE,MAAAA,CAAOD,EAAE,EAAEE,UAAU,KAAK;IAChC,IAAI;MACF,MAAM3B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,iBAAiB6B,EAAE,EAAE,EAAE;QACjEvB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACqB,UAAU;MACjC,CAAC,CAAC;MAEF,IAAI,CAAC3B,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAgB,MAAM,EAAE,MAAOH,EAAE,IAAK;IACpB,IAAI;MACF,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,iBAAiB6B,EAAE,EAAE,EAAE;QACjEvB,MAAM,EAAE;MACV,CAAC,CAAC;MAEF,IAAI,CAACF,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAiB,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAM7B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,SAAS,CAAC;MACtD,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MACA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}